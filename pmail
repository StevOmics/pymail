#! /usr/bin/python
import argparse
import sys
import os
import json
from smtplib import SMTP_SSL, SMTP       # this invokes the secure SMTP protocol (port 465, uses SSL)
from email.mime.text import MIMEText
from os.path import basename
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
from os.path import expanduser
home = expanduser("~")
default_path=os.path.join(home,".mail")
verbose = False

def send(**kwargs):
    if('config' in kwargs): 
        config_path = kwargs['config']
    else:
        config_path = default_path
    with open(config_path, "r") as f:
        params = json.load(f)
    SMTPserver = params['SMTPserver']
    USERNAME = params['USERNAME']
    if('PASSWORD' in params): 
        PASSWORD = params['PASSWORD']
    else:
        if(verbose): print("[Warning!] No password specified!")
        PASSWORD = None

    #FROM:
    if('from' in kwargs):
        sender = kwargs['from']
    elif('sender' in params): 
        sender = params['sender']
    else: 
        sender = params['USERNAME']
    
    #TYPE:
    if('type' in kwargs):
        text_subtype = kwargs['type']
    else:
        text_subtype = 'plain'

    #TO:
    if('to' in kwargs):
        to =kwargs['to']
    elif('destination' in kwargs):
        to = kwargs['destination']
    elif('to' in params):
        if(verbose): print("Trying to load destination from file")
        to = params['to']
    elif('destination' in params):
        if(verbose): print("Trying to load destination from file")
        to = params['destination']
    else:
        if(verbose): print("No destination specified. Using sender address")
        to = sender

    if('cc' in kwargs):
        cc = kwargs['cc']
    else:
        cc = None
    if('bcc' in kwargs):
        bcc = kwargs['bcc']    
    else:
        bcc = None
    #SUBJECT:
    if('subject' in kwargs):
        subject=kwargs['subject']
    else:
        subject = "Message from: "+sender
    if(len(subject)<2): subject="Message from "+sender
    if('message' in kwargs):
        content=kwargs['message']
    else:
        content = subject
    if('attachment' in kwargs):
        attachment = kwargs['attachment']
        if(verbose): print("Adding attachment: "+attachment)
    else:
        attachment = None
    # msg = MIMEText(content, text_subtype)
    msg = MIMEMultipart()
    msg.attach(MIMEText(content, text_subtype))
    msg['Subject']= subject
    msg['From']   = sender # some SMTP servers will do this automatically, not all
    msg['To'] = to
    if(cc): msg['Cc'] = cc
    if(bcc): msg['Bcc'] = bcc
    if(attachment):
        with open(attachment, "rb") as fil:
            part = MIMEApplication(
                fil.read(),
                Name=basename(attachment)
            )
        part['Content-Disposition'] = 'attachment; filename="%s"' % basename(attachment)
        msg.attach(part)
        # After
    if(PASSWORD):
        try:
            conn = SMTP_SSL(SMTPserver)
            # conn.set_debuglevel(False)
            conn.login(USERNAME, PASSWORD)
        except:
            if(verbose): print("Unable to authenticate with secure SMTP with SSL. Trying SMTP.")
            try:
                conn = SMTP(SMTPserver)
                conn.login(USERNAME, PASSWORD)
            except:
                conn = SMTP(SMTPserver)
    else:
        if(verbose): print("Trying without authenticating.")
        conn = SMTP(SMTPserver)
    try:
        if(verbose): print("[Sending email message]")
        if(verbose): print(msg.as_string())
        conn.sendmail(sender, to, msg.as_string())
    except Exception as e:
        if(verbose): print("Oh no! Encountered an error sending this message!")
        if(verbose): print(e)
        raise Exception("[Error] Unable to send message")
    finally:
        conn.quit()
    return True

if(__name__=='__main__'):
    kwargs = {}
    parser = argparse.ArgumentParser(description="Python mail, compatible with Linux mail.")
    # parser.add_argument("to", type=str,help="destination")
    parser.add_argument("-v", "--verbose", action="store_true",help="increase output verbosity")
    parser.add_argument("-s", "--subject",help="Subject",nargs='+')
    parser.add_argument("-c", "--cc",help="CC recipients")
    parser.add_argument("-b", "--bcc",help="BCC recipients")
    parser.add_argument("-r", "--sender",help="From address")
    parser.add_argument("-m", "--message",help="Specify message")
    parser.add_argument("-a", "--attachment",help="Specify attachment")
    parser.add_argument("-f", "--config",help="Specify config file path (default: ~/.mail)")
    # args = parser.parse_args()
    args, unknownargs = parser.parse_known_args()
    if(args.verbose): verbose = True
    if(args.message):
        kwargs['message'] = args.message
    else:
        kwargs['message'] = "\n".join(sys.stdin)
    if(len(unknownargs)>0):
        kwargs['to'] = unknownargs[0]
    if(args.sender):
        kwargs['from'] = args.sender 
    if(args.cc):
        kwargs['cc'] = args.cc
    if(args.bcc):
        kwargs['bcc'] = args.bcc
    if(args.subject): 
        # print(args.subject)
        kwargs['subject'] = " ".join(args.subject).replace("\xe2\x80\x9c","").replace("\xe2\x80\x9d","")
    if(args.attachment):
        kwargs['attachment'] = args.attachment
    if(args.config):
        kwargs['config'] = args.config
    if(verbose): print("Message: "+kwargs['message'])
    send(**kwargs)