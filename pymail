#! /usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import sys
import os
import platform  # Import the platform module
from os.path import basename
from os.path import expanduser
import json
from smtplib import SMTP_SSL, SMTP
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
import re
import socket
from datetime import datetime

home = expanduser("~")
default_path = os.path.join(home, ".mail")
verbose = False

def clean_text(str):
    str = re.sub(r'\\x[a-zA-Z0-9]{2}', '', str)
    str = re.sub(r'[^a-zA-Z0-9-_#@%&!.;:*$,|\-() ]', '', str)
    return str

def remove_returns(str):
    return re.sub(r'\n', ' ', str)

def get_hostname_and_username():
    return platform.node(), os.getlogin()

def send(**kwargs):
    try:
        # Load params
        if 'config' in kwargs:
            config_path = kwargs['config']
        else:
            config_path = default_path

        with open(config_path, "r") as f:
            params = json.load(f)

        # Define required parameters
        server = kwargs.get('server', params.get('server', params.get('SMTPserver')))
        if not server:
            # raise ValueError("SMTP Server not defined. Example: \"SMTPserver\" : \"smtp.mail.yahoo.com\"")
            server = "[unknown]"

        username = kwargs.get('username', params.get('USERNAME', params.get('username', params.get('user'))))
        if not username:
            # raise ValueError("No username defined")
            username = "[username]"

        password = kwargs.get('password', params.get('PASSWORD', params.get('password')))
        if verbose and not password:
            print("[Warning!] No password specified!")

        sender = kwargs.get('from', params.get('sender', username))
        to = kwargs.get('to', kwargs.get('destination', params.get('to', params.get('destination', sender))))
        cc = kwargs.get('cc', None)
        bcc = kwargs.get('bcc', None)
        
        # Get hostname and username
        hostname, user = get_hostname_and_username()
        
        # Modify the subject and message
        subject = kwargs.get('subject', "Message from: " + sender)
        if len(subject) < 2:
            subject = "Message from " + sender
        subject = f"[pymail from {user}@{hostname}] " + subject
        content = kwargs.get('message', subject)
        content += f"\n\nSent with pymail @ {datetime.now()} by {user}@{hostname}."
        text_subtype = kwargs.get('type', 'plain')
        attachment = kwargs.get('attachment', None)

        msg = MIMEMultipart()
        msg.attach(MIMEText(content, text_subtype))
        msg['Subject'] = subject
        msg['From'] = sender
        msg['To'] = to
        if cc:
            msg['Cc'] = cc
        if bcc:
            msg['Bcc'] = bcc

        if attachment:
            with open(attachment, "rb") as fil:
                part = MIMEApplication(fil.read(), Name=basename(attachment))
            part['Content-Disposition'] = 'attachment; filename="%s"' % basename(attachment)
            msg.attach(part)

        if password:
            try:
                conn = SMTP_SSL(server, timeout=10)  # Set a timeout here
                conn.login(username, password)
            except Exception as e:
                if verbose:
                    print("Unable to authenticate with secure SMTP with SSL. Trying SMTP.")
                try:
                    conn = SMTP(server, timeout=10)  # Set a timeout here
                    conn.login(username, password)
                except Exception as e:
                    conn = SMTP(server, timeout=10)  # Set a timeout here
        else:
            if verbose:
                print("Trying without authenticating.")
            conn = SMTP(server, timeout=10)  # Set a timeout here

        try:
            if verbose:
                print("[Sending email message]")
                print(msg.as_string())
            conn.sendmail(sender, to, msg.as_string())
            print("Email sent successfully.")
        except Exception as e:
            if verbose:
                print("Oh no! Encountered an error sending this message!")
                print(e)
            raise Exception("Unable to send message")
        finally:
            conn.quit()

        return True
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    kwargs = {}
    parser = argparse.ArgumentParser(description="Python mail, compatible with Linux mail.")
    parser.add_argument("-v", "--verbose", action="store_true", help="increase output verbosity")
    parser.add_argument("-s", "--subject", help="Subject")
    parser.add_argument("-c", "--cc", help="CC recipients")
    parser.add_argument("-b", "--bcc", help="BCC recipients")
    parser.add_argument("-r", "--sender", help="From address")
    parser.add_argument("-a", "--attachment", help="Specify attachment")
    parser.add_argument("-f", "--config", help="Specify config file path (default: ~/.mail)")
    parser.add_argument("-u", "--username", help="Specify username")
    parser.add_argument("-p", "--password", help="Specify password")
    parser.add_argument("-e", "--server", help="Specify SMTP server")
    args, unknownargs = parser.parse_known_args()

    if sys.stdin.isatty():
        print("Interactive mode detected.")
        print("Please provide the recipient email address as the first argument.")
        print("Enter your message below. Press Ctrl+D (Ctrl+Z on Windows) when you're done.")
        message_lines = sys.stdin.readlines()
        kwargs['message'] = "\n".join(message_lines).strip()
    else:
        print("Non-interactive mode detected.")
        # Read the message from stdin
        message_lines = sys.stdin.readlines()
        kwargs['message'] = "\n".join(message_lines).strip()

    if args.verbose:
        verbose = True

    try:
        if not unknownargs:
            raise ValueError("No recipient specified. Please provide a recipient email address.")

        kwargs['to'] = unknownargs[0]

        if args.sender:
            kwargs['from'] = args.sender
        if args.cc:
            kwargs['cc'] = args.cc
        if args.bcc:
            kwargs['bcc'] = args.bcc
        if args.subject:
            kwargs['subject'] = args.subject
        if args.server:
            kwargs['server'] = args.server
        if verbose:
            print("Message: " + kwargs.get('message', ''))
        send(**kwargs)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)
